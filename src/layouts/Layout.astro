---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "New Proyect" } = Astro.props;
import Footer from "@/components/Footer.astro";
import Navbar from "@/components/Navbar.astro";
import "@/styles/global.css";
import SmoothScroll from "@/components/SmoothScroll.jsx";
import HideNavbar from "@/components/HideNavbar";
import "@/styles/dialog-animations.css";
import Whatsapp from "@/components/Whatsapp.astro";
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="">
    <!-- üé® Canvas de fondo shader -->
    <canvas id="shader-canvas" class="fixed inset-0 w-full h-full -z-10"
    ></canvas>

    <Navbar />

    <div id="smooth-wrapper">
      <div id="smooth-content">
        <slot />

        <Footer />
      </div>
    </div>
    <HideNavbar client:load />
    <SmoothScroll client:load />
    <Whatsapp />

    <script type="module">
      const canvas = document.getElementById("shader-canvas");

      if (!(canvas instanceof HTMLCanvasElement)) {
        throw new Error(
          "No se encontr√≥ el canvas con id 'shader-canvas' o no es un canvas"
        );
      }

      const gl = canvas.getContext("webgl");
      if (!gl) {
        alert("WebGL no est√° soportado en este navegador.");
        throw new Error("WebGL no disponible.");
      }

      function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        gl.viewport(0, 0, canvas.width, canvas.height);
      }
      window.addEventListener("resize", resizeCanvas);
      resizeCanvas();

      const vs = gl.createShader(gl.VERTEX_SHADER);
      gl.shaderSource(
        vs,
        `
        attribute vec2 position;
        void main() {
          gl_Position = vec4(position, 0.0, 1.0);
        }
      `
      );
      gl.compileShader(vs);

      const fs = gl.createShader(gl.FRAGMENT_SHADER);
      gl.shaderSource(
        fs,
        `
        precision highp float;
        uniform float iTime;
        uniform vec2 iResolution;
    
        void mainImage(out vec4 fragColor, in vec2 fragCoord) {
          vec2 uv = fragCoord / iResolution.xy;
          vec3 col = vec3(0.039, 0.329, 0.612) * (0.5 + 0.5 * sin(iTime + length(uv - 0.5) * 10.0));
          fragColor = vec4(col, 1.0);
        }
    
        void main() {
          mainImage(gl_FragColor, gl_FragCoord.xy);
        }
      `
      );
      gl.compileShader(fs);

      const program = gl.createProgram();
      gl.attachShader(program, vs);
      gl.attachShader(program, fs);
      gl.linkProgram(program);
      gl.useProgram(program);

      const position = gl.getAttribLocation(program, "position");
      const buffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
      gl.bufferData(
        gl.ARRAY_BUFFER,
        new Float32Array([-1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1]),
        gl.STATIC_DRAW
      );
      gl.enableVertexAttribArray(position);
      gl.vertexAttribPointer(position, 2, gl.FLOAT, false, 0, 0);

      const iTime = gl.getUniformLocation(program, "iTime");
      const iResolution = gl.getUniformLocation(program, "iResolution");

      function render(t) {
        gl.uniform1f(iTime, t * 0.001);
        gl.uniform2f(iResolution, canvas.width, canvas.height);
        gl.drawArrays(gl.TRIANGLES, 0, 6);
        requestAnimationFrame(render);
      }

      requestAnimationFrame(render);
    </script>
  </body>
</html>

<style>
  html {
    font-family: AeonikTRIAL, sans-serif;
  }
  html,
  body {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    width: 100%;
    height: 100%;
    overflow: auto;
  }
  #smooth-wrapper {
    height: 100%;
    overflow: hidden;
  }
</style>
